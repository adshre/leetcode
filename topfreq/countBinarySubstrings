class Solution:
    def countBinarySubstrings(self, s: str) -> int:
        """
        prev, curr, ans = 0, 1, 0   # store curr as 1 count group and other as 0
        for i in range(1, len(s)):n # for each
            if s[i-1] != s[i]:  # if breakpoint achieved
                ans += min(prev, curr) # min of previous group and new and add them
                prev = curr
                curr = 1  # reset
            else: 
                curr += 1  # in case of match reset
        ans += min(prev, curr)  # to handle last two group
        return ans #return
    
    # https://leetcode.com/problems/count-binary-substrings/discuss/1172569/Short-and-Easy-w-Explanation-and-Comments-or-Keeping-Consecutive-0s-and-1s-Count-or-Beats-100
    
    COMPLEXITY:
    
    TIME: O(N)
    SPACE: O(1)
    """
        
        groups = [1]
        for i in range(1, len(s)):
            if s[i-1] != s[i]:
                groups.append(1)
            else:
                groups[-1] += 1
        ans = 0
        for i in range(1, len(groups)):
            ans += min(groups[i-1], groups[i])
        return ans
    """
     COMPLEXITY:
    
    TIME: O(N)
    SPACE: O(N)
    """
            
