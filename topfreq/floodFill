class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        if image == None or image[sr][sc] == newColor:
            return image
        self.dfs(image, sr, sc, image[sr][sc], newColor)
        return image
    
    def dfs(self, image, r, c, oldColor, newColor):
        
        if r < 0 or r >= len(image) or c<0 or c>= len(image[0]) or image[r][c] != oldColor:
            return
        image[r][c] = newColor
        self.dfs(image, r+1, c, oldColor, newColor )
        self.dfs(image, r-1, c, oldColor, newColor )   
        self.dfs(image, r, c+1, oldColor, newColor )
        self.dfs(image, r, c-1 ,oldColor, newColor )
                
            
"""
Time and Space complexity : O(N)
"""
