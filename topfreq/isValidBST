# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        """
        def validate(node, low = -math.inf, high = math.inf):
            if not node:
                return True
            if node.val <= low or node.val >= high:
                return False
            return validate(node.right, node.val, high) and validate(node.left, low, node.val)
        return validate(root)


COMPLEXITY  =>
TIME : O(N) since we visit each node exactly once.
SPACE: O(N) since we store entire tree.

"""   

        def inorder(root):
            if not root:
                return True
            if not inorder(root.left):
                return False
            if root.val <= self.prev:
                return False
            self.prev = root.val
            return inorder(root.right)
        self.prev = -math.inf
        return inorder(root)
    
"""

COMPLEXITY  =>
TIME : O(N) since bad element is rightmost leaf.
SPACE: O(N) for space on run time stack.
"""
