class Solution:
    def getModifiedArray(self, length: int, updates: List[List[int]]) -> List[int]:
        """  
        arr = [0] * length
        for each in updates:
            for i in range(int(each[0]), int(each[1])+ 1):
                arr[i] += each[2]
        return arr
    
    Naive approach :
    Time : O(N.k) where K = number of update queries and n = length of array. Wach k update operations take O(n) time 
    space: O(1)
    
        """
    
        arr = [0] *(length+1)            # create len + 1 size arr
        for start, end, val in updates:
            arr[start] += val          #inc val to start
            arr[end+1] -= val          # dec val from end + 1
        for i in range(1, len(arr)):
            arr[i] += arr[i-1]         # cumulative sum ,i.e add prev to next
        return arr[:-1]                 # don't consider last index of arr as we took +1 in size of arr
    
    """
    Time complexity :
    O(n+k),
    k operations done in O(1) times and cumulative sum takes O(N)
    
    Space: O(1)
    """
    
            
    
    
