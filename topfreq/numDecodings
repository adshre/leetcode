class Solution:
    @lru_cache(maxsize=None)
    def calculateNumberOfDecodings(self, index, string):
            
        if index == len(string):
            return 1
            
        if string[index] == '0':
            return 0
            
        if index == len(string) - 1:
            return 1
            
        ans = self.calculateNumberOfDecodings(index + 1, string)
        if int(string[index:index+2]) <= 26: #validating if two digits are in valid range
            ans += self.calculateNumberOfDecodings(index + 2, string)
        
        return ans
    def numDecodings(self, s: str) -> int:

        return self.calculateNumberOfDecodings(0, s)
    
    
"""
O(N)
Memoization helps in pruning the recurssion tree and hence decoding for an index only once.

Dictionary used for memoization would take the space equal to length of the string

"""
